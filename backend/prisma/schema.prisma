generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(cuid())
  email                   String         @unique
  password                String
  role                    UserRole       @default(CLIENT)
  firstName               String
  lastName                String
  phone                   String?
  avatar                  String?
  isActive                Boolean        @default(true)
  isVerified              Boolean        @default(false)
  emailVerified           Boolean        @default(false)
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  lastLoginAt             DateTime?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  adminActions            AdminAction[]  @relation("AdminPerformer")
  artistProfile           ArtistProfile?
  reviewsGiven            Review[]       @relation("ReviewAuthor")
  reviewsReceived         Review[]       @relation("ReviewRecipient")
  favorites               Favorite[]     @relation("FavoriteUser")
  claimedStudios          Studio[]       @relation("StudioClaimedBy")
  verifiedStudios         Studio[]       @relation("StudioVerifiedBy")

  @@map("users")
}

model ArtistProfile {
  id                 String             @id @default(cuid())
  userId             String             @unique
  bio                String?
  studioName         String?
  website            String?
  instagram          String?
  facebook           String?
  twitter            String?
  youtube            String?
  linkedin           String?
  calendlyUrl        String?
  latitude           Float?
  longitude          Float?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  hourlyRate         Float?
  minPrice           Float?
  maxPrice           Float?
  isVerified         Boolean            @default(false)
  isFeatured         Boolean            @default(false)
  verificationStatus VerificationStatus @default(PENDING)
  verificationNotes  String?
  verifiedAt         DateTime?
  verifiedBy         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  lastViewedAt       DateTime?
  profileViews       Int                @default(0)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  flash              Flash[]
  services           Service[]          @relation("ArtistProfileToService")
  specialties        Specialty[]        @relation("ArtistProfileToSpecialty")
  favorites          Favorite[]         @relation("FavoriteArtist")
  studioMemberships  StudioArtist[]

  @@map("artist_profiles")
}

model Specialty {
  id          String          @id @default(cuid())
  name        String          @unique
  category    String
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  artists     ArtistProfile[] @relation("ArtistProfileToSpecialty")

  @@map("specialties")
}

model Service {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  price       Float?
  duration    Int?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  artists     ArtistProfile[] @relation("ArtistProfileToService")

  @@map("services")
}

model Flash {
  id            String          @id @default(cuid())
  artistId      String
  title         String
  description   String?
  imageUrl      String
  imagePublicId String?
  imageWidth    Int?
  imageHeight   Int?
  imageFormat   String?
  imageBytes    Int?
  basePrice     Float?
  complexity    FlashComplexity @default(MEDIUM)
  timeEstimate  Int?
  isRepeatable  Boolean         @default(true)
  sizePricing   Json?
  isAvailable   Boolean         @default(true)
  isApproved    Boolean         @default(true)
  tags          String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  artist        ArtistProfile   @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@map("flash")
}

model Review {
  id          String   @id @default(cuid())
  authorId    String
  recipientId String
  rating      Int      @default(5)
  title       String?
  comment     String?
  images      String[]
  isVerified  Boolean  @default(false)
  isHidden    Boolean  @default(false)
  isApproved  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  recipient   User     @relation("ReviewRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([authorId, recipientId])
  @@map("reviews")
}

model AdminAction {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  details    String?
  createdAt  DateTime @default(now())
  admin      User     @relation("AdminPerformer", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

// Studio System Models
model Studio {
  id              String             @id @default(cuid())
  title           String
  slug            String             @unique
  website         String?
  phoneNumber     String?            @map("phone_number")
  email           String?
  facebookUrl     String?            @map("facebook_url")
  instagramUrl    String?            @map("instagram_url")
  twitterUrl      String?            @map("twitter_url")
  linkedinUrl     String?            @map("linkedin_url")
  youtubeUrl      String?            @map("youtube_url")
  latitude        Float?
  longitude       Float?
  address         String?
  city            String?
  state           String?
  zipCode         String?            @map("zip_code")
  country         String?
  isActive        Boolean            @default(true) @map("is_active")
  isVerified      Boolean            @default(false) @map("is_verified")
  isFeatured      Boolean            @default(false) @map("is_featured")
  verificationStatus VerificationStatus @default(PENDING) @map("verification_status")
  claimedBy       String?            @map("claimed_by")
  claimedAt       DateTime?          @map("claimed_at")
  verifiedBy      String?            @map("verified_by")
  verifiedAt      DateTime?          @map("verified_at")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  
  // Relations
  claimedByUser   User?              @relation("StudioClaimedBy", fields: [claimedBy], references: [id])
  verifiedByUser  User?              @relation("StudioVerifiedBy", fields: [verifiedBy], references: [id])
  artists         StudioArtist[]

  @@map("studios")
}

model StudioArtist {
  id          String        @id @default(cuid())
  studioId    String        @map("studio_id")
  artistId    String        @map("artist_id")
  role        StudioRole    @default(ARTIST)
  isActive    Boolean       @default(true) @map("is_active")
  joinedAt    DateTime      @default(now()) @map("joined_at")
  leftAt      DateTime?     @map("left_at")
  
  studio      Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)
  artist      ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  @@unique([studioId, artistId])
  @@map("studio_artists")
}

enum UserRole {
  CLIENT
  ARTIST
  ADMIN
  ARTIST_ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum FlashComplexity {
  SIMPLE
  MEDIUM
  COMPLEX
  MASTERPIECE
}

enum StudioRole {
  OWNER
  MANAGER
  ARTIST
  GUEST
}

// Favorites model - for clients to favorite artists
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  artistId  String
  user      User     @relation("FavoriteUser", fields: [userId], references: [id], onDelete: Cascade)
  artist    ArtistProfile @relation("FavoriteArtist", fields: [artistId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, artistId])
  @@map("favorites")
}
