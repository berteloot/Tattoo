generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(cuid())
  email                   String         @unique
  password                String
  role                    UserRole       @default(CLIENT)
  firstName               String
  lastName                String
  phone                   String?
  avatar                  String?
  isActive                Boolean        @default(true)
  isVerified              Boolean        @default(false)
  emailVerified           Boolean        @default(false)
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  lastLoginAt             DateTime?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  adminActions            AdminAction[]  @relation("AdminPerformer")
  artistProfile           ArtistProfile?
  favorites               Favorite[]     @relation("FavoriteUser")
  reviewsGiven            Review[]       @relation("ReviewAuthor")
  reviewsReceived         Review[]       @relation("ReviewRecipient")
  galleryLikes            TattooGalleryLike[]
  galleryComments         TattooGalleryComment[]

  @@map("users")
}

model ArtistProfile {
  id                 String             @id @default(cuid())
  userId             String             @unique
  bio                String?
  studioName         String?
  website            String?
  instagram          String?
  facebook           String?
  twitter            String?
  youtube            String?
  linkedin           String?
  calendlyUrl        String?
  latitude           Float?
  longitude          Float?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  hourlyRate         Float?
  minPrice           Float?
  maxPrice           Float?
  isVerified         Boolean            @default(false)
  isFeatured         Boolean            @default(false)
  verificationStatus VerificationStatus @default(PENDING)
  verificationNotes  String?
  verifiedAt         DateTime?
  verifiedBy         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  lastViewedAt       DateTime?
  profileViews       Int                @default(0)
  pinterest          String?            @db.VarChar(255)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites          Favorite[]         @relation("FavoriteArtist")
  flash              Flash[]
  services           Service[]          @relation("ArtistProfileToService")
  specialties        Specialty[]        @relation("ArtistProfileToSpecialty")
  gallery            TattooGallery[]

  @@map("artist_profiles")
}

model Specialty {
  id          String          @id @default(cuid())
  name        String          @unique
  category    String
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  artists     ArtistProfile[] @relation("ArtistProfileToSpecialty")

  @@map("specialties")
}

model Service {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  price       Float?
  duration    Int?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  artists     ArtistProfile[] @relation("ArtistProfileToService")

  @@map("services")
}

model Flash {
  id            String          @id @default(cuid())
  artistId      String
  title         String
  description   String?
  imageUrl      String
  imagePublicId String?
  imageWidth    Int?
  imageHeight   Int?
  imageFormat   String?
  imageBytes    Int?
  basePrice     Float?
  complexity    FlashComplexity @default(MEDIUM)
  timeEstimate  Int?
  isRepeatable  Boolean         @default(true)
  sizePricing   Json?
  isAvailable   Boolean         @default(true)
  isApproved    Boolean         @default(true)
  tags          String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isHidden      Boolean?        @default(false)
  artist        ArtistProfile   @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@map("flash")
}

model Review {
  id          String   @id @default(cuid())
  authorId    String
  recipientId String
  rating      Int      @default(5)
  title       String?
  comment     String?
  images      String[]
  isVerified  Boolean  @default(false)
  isHidden    Boolean  @default(false)
  isApproved  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  recipient   User     @relation("ReviewRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([authorId, recipientId])
  @@map("reviews")
}

model AdminAction {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  details    String?
  createdAt  DateTime @default(now())
  admin      User     @relation("AdminPerformer", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

model Studio {
  id                 String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  title              String
  slug               String    @unique
  website            String?
  phoneNumber        String?   @map("phone_number")
  email              String?
  facebookUrl        String?   @map("facebook_url")
  instagramUrl       String?   @map("instagram_url")
  twitterUrl         String?   @map("twitter_url")
  linkedinUrl        String?   @map("linkedin_url")
  youtubeUrl         String?   @map("youtube_url")
  latitude           Float?
  longitude          Float?
  address            String?
  city               String?
  state              String?
  zipCode            String?   @map("zip_code")
  country            String?
  isActive           Boolean?  @default(true) @map("is_active")
  isVerified         Boolean?  @default(false) @map("is_verified")
  isFeatured         Boolean?  @default(false) @map("is_featured")
  verificationStatus String?   @default("PENDING") @map("verification_status")
  claimedBy          String?   @map("claimed_by")
  claimedAt          DateTime? @map("claimed_at") @db.Timestamp(6)
  verifiedBy         String?   @map("verified_by")
  verifiedAt         DateTime? @map("verified_at") @db.Timestamp(6)
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([latitude, longitude], map: "idx_studios_coordinates")
  @@map("studios")
}

model StudioArtist {
  id       String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  studioId String       @map("studio_id")
  artistId String       @map("artist_id")
  role     studio_role? @default(ARTIST)
  isActive Boolean?     @default(true) @map("is_active")
  joinedAt DateTime?    @default(now()) @map("joined_at") @db.Timestamp(6)
  leftAt   DateTime?    @map("left_at") @db.Timestamp(6)

  @@unique([studioId, artistId], map: "unique_studio_artist")
  @@map("studio_artists")
}

model Favorite {
  id        String        @id @default(cuid())
  userId    String
  artistId  String
  createdAt DateTime      @default(now())
  artist    ArtistProfile @relation("FavoriteArtist", fields: [artistId], references: [id], onDelete: Cascade)
  user      User          @relation("FavoriteUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, artistId])
  @@index([artistId], map: "idx_favorites_artist_id")
  @@index([createdAt], map: "idx_favorites_created_at")
  @@index([userId], map: "idx_favorites_user_id")
  @@map("favorites")
}

model GeocodeCache {
  id               String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  address_hash     String    @unique
  original_address String
  latitude         Float
  longitude        Float
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)

  @@index([address_hash], map: "idx_geocode_cache_address_hash")
  @@index([updated_at], map: "idx_geocode_cache_updated_at")
  @@map("geocode_cache")
}

enum UserRole {
  CLIENT
  ARTIST
  ADMIN
  ARTIST_ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum FlashComplexity {
  SIMPLE
  MEDIUM
  COMPLEX
  MASTERPIECE
}

enum studio_role {
  OWNER
  MANAGER
  ARTIST
  GUEST
}

model TattooGallery {
  id                    String                  @id @default(cuid())
  artistId              String                  @map("artist_id")
  title                 String
  description           String?
  imageUrl              String                  @map("image_url")
  imagePublicId         String?                 @map("image_public_id")
  imageWidth            Int?                    @map("image_width")
  imageHeight           Int?                    @map("image_height")
  imageFormat           String?                 @map("image_format")
  imageBytes            Int?                    @map("image_bytes")
  thumbnailUrl          String?                 @map("thumbnail_url")
  tattooStyle           String?                 @map("tattoo_style")
  bodyLocation          String?                 @map("body_location")
  tattooSize            String?                 @map("tattoo_size")
  colorType             String?                 @map("color_type")
  sessionCount          Int                     @default(1) @map("session_count")
  hoursSpent            Int?                    @map("hours_spent")
  clientConsent         Boolean                 @default(false) @map("client_consent")
  clientAnonymous       Boolean                 @default(true) @map("client_anonymous")
  clientAgeVerified     Boolean                 @default(false) @map("client_age_verified")
  isBeforeAfter         Boolean                 @default(false) @map("is_before_after")
  beforeImageUrl        String?                 @map("before_image_url")
  beforeImagePublicId   String?                 @map("before_image_public_id")
  afterImageUrl         String?                 @map("after_image_url")
  afterImagePublicId    String?                 @map("after_image_public_id")
  isFeatured            Boolean                 @default(false) @map("is_featured")
  isApproved            Boolean                 @default(false) @map("is_approved")
  isHidden              Boolean                 @default(false) @map("is_hidden")
  tags                  String[]
  categories            String[]
  completedAt           DateTime?               @map("completed_at")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  artist                ArtistProfile           @relation(fields: [artistId], references: [id], onDelete: Cascade)
  likes                 TattooGalleryLike[]
  comments              TattooGalleryComment[]
  views                 TattooGalleryView[]

  @@index([artistId])
  @@index([tattooStyle])
  @@index([bodyLocation])
  @@index([isFeatured])
  @@index([isApproved])
  @@index([createdAt])
  @@index([tags])
  @@index([categories])
  @@map("tattoo_gallery")
}

model TattooGalleryLike {
  id            String        @id @default(cuid())
  galleryItemId String        @map("gallery_item_id")
  userId        String        @map("user_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  galleryItem   TattooGallery @relation(fields: [galleryItemId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([galleryItemId, userId])
  @@index([galleryItemId])
  @@index([userId])
  @@map("tattoo_gallery_likes")
}

model TattooGalleryComment {
  id            String        @id @default(cuid())
  galleryItemId String        @map("gallery_item_id")
  userId        String        @map("user_id")
  comment       String
  isApproved    Boolean       @default(true) @map("is_approved")
  isHidden      Boolean       @default(false) @map("is_hidden")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  galleryItem   TattooGallery @relation(fields: [galleryItemId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([galleryItemId])
  @@index([userId])
  @@index([isApproved])
  @@map("tattoo_gallery_comments")
}

model TattooGalleryView {
  id            String        @id @default(cuid())
  galleryItemId String        @map("gallery_item_id")
  viewerIp      String?       @map("viewer_ip")
  userAgent     String?       @map("user_agent")
  referrer      String?
  viewedAt      DateTime      @default(now()) @map("viewed_at")
  galleryItem   TattooGallery @relation(fields: [galleryItemId], references: [id], onDelete: Cascade)

  @@index([galleryItemId])
  @@index([viewedAt])
  @@map("tattoo_gallery_views")
}
