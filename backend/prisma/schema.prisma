// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - handles clients, artists, and admins
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(CLIENT)
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false) // For admin verification
  emailVerified Boolean @default(false) // For email verification
  emailVerificationToken String? // Token for email verification
  emailVerificationExpiry DateTime? // Expiry for email verification token
  resetToken String?
  resetTokenExpiry DateTime?
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Artist-specific fields
  artistProfile ArtistProfile?
  
  // Reviews written by this user
  reviewsGiven Review[] @relation("ReviewAuthor")
  
  // Reviews received (for artists)
  reviewsReceived Review[] @relation("ReviewRecipient")

  // Admin actions tracking
  adminActions AdminAction[] @relation("AdminPerformer")

  @@map("users")
}

// Artist profile - extends user information for artists
model ArtistProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic info
  bio         String?
  studioName  String?
  website     String?
  instagram   String?
  facebook    String?
  twitter     String?
  youtube     String?
  linkedin    String?
  calendlyUrl String? // Calendly booking URL for the artist
  
  // Location
  latitude    Float?
  longitude   Float?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  
  // Services and specialties
  specialties Specialty[]
  services    Service[]
  
  // Portfolio
  flash       Flash[]
  
  // Business info
  hourlyRate  Float?
  minPrice    Float?
  maxPrice    Float?
  isVerified  Boolean  @default(false)
  isFeatured  Boolean  @default(false) // Admin can feature artists
  
  // Verification and moderation
  verificationStatus VerificationStatus @default(PENDING)
  verificationNotes   String? // Admin notes for verification
  verifiedAt         DateTime?
  verifiedBy         String? // Admin ID who verified
  
  // Analytics and tracking
  profileViews       Int      @default(0) // Total profile views
  lastViewedAt       DateTime? // Last time profile was viewed
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("artist_profiles")
}

// Artist specialties (organized by tattoo style categories)
model Specialty {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String   // Category grouping (e.g., "Traditional & Regional", "Blackwork & Line-Based")
  description String?
  isActive    Boolean  @default(true) // Admin can disable specialties
  
  // Many-to-many with artists
  artists     ArtistProfile[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("specialties")
}

// Artist services (e.g., Custom Design, Cover-up, Touch-up, etc.)
model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  price       Float?
  duration    Int? // in minutes
  isActive    Boolean  @default(true) // Admin can disable services
  
  // Many-to-many with artists
  artists     ArtistProfile[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}

// Flash/Portfolio items
model Flash {
  id          String   @id @default(cuid())
  artistId    String
  artist      ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  imageUrl    String
  imagePublicId String? // Cloudinary public ID for image management
  imageWidth  Int?     // Image dimensions for optimization
  imageHeight Int?
  imageFormat String?  // Image format (jpg, png, webp, etc.)
  imageBytes  Int?     // File size in bytes
  
  // Pricing structure
  basePrice   Float?   // Base price for the design
  complexity  FlashComplexity @default(MEDIUM) // Design complexity level
  timeEstimate Int?    // Estimated time in minutes
  isRepeatable Boolean @default(true) // Can this design be used multiple times
  
  // Size-based pricing (JSON field for flexibility)
  sizePricing Json?    // {"small": {"price": 150, "time": 90}, "medium": {"price": 200, "time": 120}}
  
  isAvailable Boolean  @default(true)
  isApproved  Boolean  @default(true) // Admin can moderate flash items
  tags        String[] // Array of tags
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("flash")
}

// Reviews and ratings
model Review {
  id          String   @id @default(cuid())
  authorId    String
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  
  recipientId String
  recipient   User     @relation("ReviewRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  
  rating      Int      @default(5) // 1-5 stars
  title       String?
  comment     String?
  images      String[] // Array of image URLs
  
  isVerified  Boolean  @default(false)
  isHidden    Boolean  @default(false) // Admin can hide inappropriate reviews
  isApproved  Boolean  @default(true)  // Admin can moderate reviews
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([authorId, recipientId])
  @@map("reviews")
}

// Admin actions tracking for audit trail
model AdminAction {
  id          String   @id @default(cuid())
  adminId     String
  admin       User     @relation("AdminPerformer", fields: [adminId], references: [id], onDelete: Cascade)
  
  action      String   // e.g., "VERIFY_ARTIST", "HIDE_REVIEW", "FEATURE_ARTIST"
  targetType  String   // e.g., "USER", "ARTIST", "REVIEW", "FLASH"
  targetId    String   // ID of the target being acted upon
  details     String?  // Additional details about the action
  
  createdAt   DateTime @default(now())

  @@map("admin_actions")
}

// User roles enum
enum UserRole {
  CLIENT
  ARTIST
  ADMIN
  ARTIST_ADMIN
}

// Artist verification status
enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

// Flash complexity levels
enum FlashComplexity {
  SIMPLE
  MEDIUM
  COMPLEX
  MASTERPIECE
} 